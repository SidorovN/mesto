export default class UserInfo {
  constructor(name, job, nameField, jobField) {
    this.nameField = nameField
    this.jobField = jobField
    // Вот тут лучше точно воздержаться от этого вызова, т.к. в следующем проекте вы будете данные от сервера получать
    // и в случае ошибки сервера вам будет нечго передать в конструктор. Лучше не передавайте начальные имя и профессию
    // в конструктор класса и не вызывайте установку в конструкторе. Лучше создавать экземпляр класса и потом вызывать метод
    // сохранения данных пользователя по потребности.
    // Можно лучше
    this.setUserInfo(name, job)
  }
  setUserInfo = (name, job) => {
    this.name = name
    this.job = job
    // Вот тут спорная конструкция, я бы лучше не вызывал тут обновление
    // потому что (не в этом проекте, а вообще) есть вероятность что обновление данных не означает автоматическую перерисовку
    // По крайней мере стоит помнить, что у функции единственное назначение, и вполне нормально завести
    // третью функцию для вызова двух других. Это делает код более гибким и простым при поддержке.
    this.updateRender(this.name, this.job)
  }
  updateRender = (name, job) => {
    this.nameField.textContent = name
    this.jobField.textContent = job
  }
  getUserInfo() {
    return { name: this.name, job: this.job }
  }
}

